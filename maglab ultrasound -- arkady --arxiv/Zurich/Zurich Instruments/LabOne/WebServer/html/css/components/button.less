@import "../ziHttpSizeDefs.less";
// ---------------------------------
// BUTTONS
// ---------------------------------
button, a.btn { 
  height: @button-size; display: inline-block; line-height: @button-size - 1; text-align: center; margin: 0; outline: 0; border-radius: 0px; padding: 0px 6px; cursor: pointer; vertical-align: bottom; font-size: 11px;
  & label { cursor: pointer; }
  &[readonly], &[readonly]  label { cursor: default; }
  &[class^="icon-"], &[class*=" icon-"] { background-size: 4*@buttonIcon-size 9*@buttonIcon-size; font-size: 12pt; width: @button-size; padding: 0; margin: 0 auto; line-height: @button-size; }
  &.btn-fixed, &.btn-fixed label{ width: @button-size; line-height: @button-size - 1; padding: 0; margin: 0 auto; }
  &.no-bg{ background-color: transparent !important; border-color: transparent !important; }
}

// webklit specific rules
foreignObject.navbtn-dragoutcont > img { display: none; }
@media screen and (-webkit-min-device-pixel-ratio:0) {
  button.dragout, a.btn.dragout {
    cursor: move;
  }
  // foreign object is a workaround to enable draggable DOM elements inside SVG 
  .savebtn-cont {
    & > image.navbtn-image, & > rect { display: none; }  // hide original buttons
    & > foreignObject.navbtn-dragoutcont > img {
      display: block;
      border: 1px solid transparent;
      pointer-events: all;
      cursor: move;
    }
  }
}

.generateToggleIcon       (toggle, 	      1); 
.generateToggleIcon       (chain, 		      2); 
.generateToggleIcon       (zeroadjust,	3); 
//.generateToggleIcon   (popup, 		      4); 
.generateToggleIcon       (autorange, 	5); 
.generateToggleIcon       (star, 	          6);
.generateToggleIcon       (fullscreen,            7);
.generateToggleIcon       (nodetree,            8); 


// Generate toggle button icon classes via function calls
.toggleBgPosition (@i: 0 , @j: 0) { // mixin for icon position
	background-position:( @i *(-@buttonIcon-size) - 1)  (@j*(-@buttonIcon-size) - 1);  /* offset of -0.063em (if size set in em) or 1px  if set in px */
}
.generateToggleIcon (@iconName, @pos)  {
	/* OFF */
	button.icon-@{iconName}, 
	.btn.icon-@{iconName}[data-zichecked="false"],
	.btn.icon-@{iconName}.waiting[data-zichecked="true"],  // waiting for the response from the server
	.btn.icon-@{iconName}[data-zichecked="true"]:not([readonly]):active:hover{ 		.toggleBgPosition (2, @pos); } 	
	/* OFF Readonly */
	button.icon-@{iconName}[readonly],
	.btn.icon-@{iconName}[data-zichecked="false"][readonly]	{						.toggleBgPosition (0, @pos); }		
	
	/* ON */
	button.icon-@{iconName}:not([readonly]):active:hover,
	.btn.icon-@{iconName}[data-zichecked="true"],
	.btn.icon-@{iconName}.waiting[data-zichecked="false"],  // waiting for the response from the server
	.btn.icon-@{iconName}[data-zichecked="false"]:not([readonly]):active:hover{ 		.toggleBgPosition (3, @pos); }   	
	/* ON  readonly */
	.btn.icon-@{iconName}[data-zichecked="true"][readonly]	{							.toggleBgPosition (1, @pos); }
}

// ---------------Button group ---------------- 
.btn-group { 
	line-height: @element-height - 1; /* vertically align labels */
  
	*:not(:first-child) { margin-left: @btnGroupSpacing !important; }
  
	&.w100p-2btn {  // 2 buttons will fill the whole parent
		padding-right: @btnGroupSpacing;
		button, .btn {
			width: 50%;
		}
	}
	//&.w100p-3btn {
	//	padding-right: 2*@btnGroupSpacing;
	//	button, .btn {
	//		width: 33.3%;
	//	}
	//}
}